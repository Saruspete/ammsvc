#!/bin/bash

set -o nounset
set -o noclobber

typeset -r MYSELF="$(readlink -f $0)"
typeset -r MYPATH="${MYSELF%/*}"
typeset -r MYCALL="$0"

# Load the lib. Will define variables to be used in this script:
# Example: this script is in /home/myuser/services/scripts/myapp-db
# APP_NAME = myapp-db
# APP_PACK = myapp
# APP_BASE = /home/myuser/services/apps/myapp
# DAT_BASE = /home/myuser/services/data/myapp/myapp-db
# SRC_BASE = /home/myuser/services/srcs/myapp/myapp-db
# TMP_BASE = /home/myuser/services/temp/myapp/myapp-db
# ## Constructed from $TMP_BASE and $DAT_BASE
# TMP_PIDS = /home/myuser/services/temp/myapp/myapp-db/pids
# LOG_BASE = /home/myuser/services/data/myapp/myapp-db/logs

# You can specify the app version to be used by changing RUN_VERS.
# By default, RUN_VERS="current", and you need to define it before loading the lib
# RUN_VERS = current
# RUN_BASE = "$APP_BASE/${APP_NAME}-${RUN_VERS}
#          = /home/myuser/services/apps/myapp/myapp-db-current
. $MYPATH/amsvc.lib

# Now, you can use some variables and leverage 'amsvc_main "$@"'
# The following "RUN_" vars are used by amsvc_start/stop/status

RUN_BIN="$RUN_BASE/bin/grafana-server"
RUN_CFG="$RUN_BASE/conf/amsvc.ini"
#RUN_OPTCFG="--config.file"
RUN_OPTPID="-pidfile"
RUN_OPTSTART="-config=$RUN_CFG -homepath=$RUN_BASE "
#RUN_OPTSTOP=""
#RUN_USER="myuser"
RUN_DAEMON="1"

function upgrade_prepare {
	typeset vers="$1"

	[[ -z "$vers" ]] && {
		log_err "Cannot call upgrade_prepare without target version"
		return 1
	}

	typeset url="https://dl.grafana.com/oss/release/grafana-$vers.linux-amd64.tar.gz"
	app_deploy "$vers" "$url" "bin/grafana-server"
}
# upgrade_confdiff "$VERSION1" "$VERSION2"
# upgrade_confmerge "$VERSION1" "$VERSION2"
# upgrade_test "$VERSION"


# Call our lib main function
amsvc_main "$@"
